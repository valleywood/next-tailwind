@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

@layer components {
  /* This is an alternative to using function props and ownerState to style a component. The corresponding Switch component can be rendered in page.tsx without a use-client directive, but you cannot easily import the class names like in JS/TS.

  However this may not be a viable pattern since you'll typically pass other non-serializable props like event handers to components, which means you will have to add your own 'use-client' boundaries in your app anyway. */
  .switch {
    &.Mui-checked {
      .MuiSwitch-thumb {
        @apply left-[20px] top-[2.5px] bg-brand-searchMain; 
      }

      .MuiSwitch-track {
         @apply bg-brand-badgeContrast;
      }
    }

    &.Mui-focusVisible .MuiSwitch-thumb {
      @apply shadow-[0_0_1px_8px_rgba(0,0,0,0.25)];
    }

    &.Mui-disabled {
      @apply opacity-40 cursor-not-allowed;
    }
  }
}
